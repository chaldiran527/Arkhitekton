Info:
Addition two variables direct test::::
===
mov al,50
add al,60 ; AL now contains the sum 110.

There are many permutations on how this might be accomplished depending on your exact requirements. For example you may need these values to be variables and thus stored in memory in which case the instructions would be similar

; Variable declaration
myVal db 50
myOtherVal db 60

; Perform addition
mov al,myVal
add al,myOtherVal
===
=======Single num addition
num1 = 4
mov rax, [num1]
sub '0'
num2 = 3
mov rbx, [num2]
sub rbx'0'



add rax,rbx
add rax,'0'
mov [num3],rax

===
231
1

0
sub '0'
2 * (10^0)=2
sub 2,'0'
0+2=2
2 * (10^1)=20
sub 3,'0'
20+3=23
23 * (10^2)=230
sub 1,'0'
230+1=231


====
section .data
    number db 2       ; define a variable called "number" with the value 2
    exponent db 4     ; define a variable called "exponent" with the value 4

section .text
    global _start

power:
    push rbp
    mov rbp, rsp      ; set up the stack frame
    mov al, [rbp+16]  ; move the base number into AL
    mov bl, [rbp+24]  ; move the exponent into BL
    cmp bl, 0         ; compare exponent with 0
    je .done          ; if exponent is 0, return 1

    mov cl, al        ; store base number in CL
    dec bl            ; decrement exponent

.loop:
    imul al, cl       ; multiply base number by CL and store result in AL
    dec bl            ; decrement exponent
    jnz .loop         ; jump to .loop if exponent is not zero

.done:
    mov rsp, rbp      ; restore the stack pointer
    pop rbp
    ret               ; return from the procedure


section .data
    num db 0      ; the input number to convert
    str db 10, 0  ; the output string buffer
                  ; reserve 10 bytes for the string and add a null terminator

section .text
    global _start   ; entry point for the program

_start:
    mov eax, 231    ; load the input number into EAX
    mov byte [num], al  ; store the least significant byte of EAX in num

    mov ebx, str    ; set EBX to point to the beginning of the output string
    add ebx, 9      ; move EBX to the end of the buffer (reserve 10 bytes)

itoa_loop:
    xor edx, edx    ; clear EDX to prepare for division
    div byte [num]  ; divide EAX by the number in num
    add dl, '0'     ; convert the remainder to an ASCII digit
    mov [ebx], dl   ; store the digit in the string buffer
    dec ebx         ; move the buffer pointer back one byte

    cmp eax, 0      ; check if the quotient is zero
    jne itoa_loop   ; if not, repeat the loop

    mov eax, 4      ; write system call
    mov ebx, 1      ; file descriptor for stdout
    mov ecx, str    ; output string
    sub ecx, ebx    ; adjust pointer to the beginning of the string
    mov edx, 10     ; string length
    int 0x80        ; call kernel

    mov eax, 1      ; exit system call
    xor ebx, ebx    ; return 0 status
    int 0x80        ; call kernel
=====
===;;;;
section .data
    str db '000', 0     ; string to hold the converted integer

section .text
    global _start
_start:
    mov eax, 123         ; integer to convert
    mov ebx, 10          ; base 10
    mov ecx, str         ; pointer to the output string
    xor edx, edx         ; clear edx to use as quotient
.while_loop:
    div ebx              ; divide by 10
    add edx, '0'         ; convert remainder to ASCII digit
    mov [ecx], dl        ; store digit in output string
    inc ecx              ; move to next character in string
    cmp eax, 0           ; check if quotient is zero
    jne .while_loop      ; if not, continue loop
    mov eax, 4           ; system call to print string to stdout
    mov ebx, 1           ; file descriptor for stdout
    mov ecx, str         ; pointer to string to print
    mov edx, 3           ; number of bytes to print
    int 0x80             ; call kernel to print string
    mov eax, 1           ; system call to exit program
    xor ebx, ebx         ; exit with return code 0
    int 0x80             ; call kernel to exit program

=====''''
section .bss
    str resb 4   ; reserve 4 bytes of space for the string

section .text
    global _start
_start:
    mov eax, 123         ; integer to convert
    mov ebx, 10          ; base 10
    mov ecx, str         ; pointer to the output string
    xor edx, edx         ; clear edx to use as quotient
.while_loop:
    div ebx              ; divide by 10
    add edx, '0'         ; convert remainder to ASCII digit
    mov [ecx], dl        ; store digit in output string
    inc ecx              ; move to next character in string
    cmp eax, 0           ; check if quotient is zero
    jne .while_loop      ; if not, continue loop
    mov eax, 4           ; system call to print string to stdout
    mov ebx, 1           ; file descriptor for stdout
    mov ecx, str         ; pointer to string to print
    mov edx, 3           ; number of bytes to print
    int 0x80             ; call kernel to print string
    mov eax, 1           ; system call to exit program
    xor ebx, ebx         ; exit with return code 0
    int 0x80             ; call kernel to exit program

====;;;
section .data
    ; define the number string to convert
    number_str db "1234", 0

section .text
    global _start

    ; atoi procedure
    atoi:
        ; initialize variables
        xor rax, rax        ; clear rax to hold the result
        mov rbx, 10         ; base 10
        mov rdi, rsi        ; set rdi to the number string address

    .loop:
        ; check for end of string
        mov al, [rdi]
        cmp al, 0
        je .done

        ; convert character to integer
        sub al, '0'

        ; multiply result by base
        mul rbx

        ; add current digit to result
        add rax, rdi

        ; increment string pointer
        inc rdi

        jmp .loop

    .done:
        ret

    ; main program
    _start:
        ; call atoi procedure
        mov rsi, number_str
        call atoi

        ; print result
        mov rax, 1          ; write syscall
        mov rdi, 1          ; stdout
        mov rdx, 16         ; message length
        syscall

        ; exit program
        mov rax, 60         ; exit syscall
        xor rdi, rdi        ; return code 0
        syscall

;-========

    
    
    printReves:
        jmp .cicloPrintReves
    .cicloPrintReves:
        cmp rdi,rsp;Se verifica si rsi apunta a la posicion de numSUma
        je  .finPrintReves;Si es igual rsi a numSuma se salta a _itoa2 
        dec rdi;Se decrementa la posicion de rsi
        mov al,[rdi];Se mueve a al el contenido de rsi
        mov [caracter],al;Se mueve al a carcater
        print caracter,longCaracter;Se imprime el caracter
        jmp .cicloPrintReves

    .finPrintReves:
        ret

    mov rsp,numInt2
    mov rdi,numInt2
    add rdi,longNumInt2
    call printReves

;========================================
section .data
    num dq 1234567890123456789 ; the number to be converted
    result db 20 dup(0)        ; buffer to hold the converted number

section .text
global convert_to_octal

convert_to_octal:
    push rbp
    mov rbp, rsp
    
    ; initialize registers
    mov rax, [num]
    mov rcx, result       ; set destination pointer

loop:
    ; divide the number by 8
    xor rdx, rdx
    div qword 8

    ; save the remainder in the buffer
    add dl, '0'
    mov [rcx], dl
    inc rcx

    ; continue loop if quotient is not zero
    cmp rax, 0
    jne loop

    ; add terminating null character to buffer
    mov byte [rcx], 0

    ; reverse the result string
    mov rsi, result
    mov rdi, result
    mov rcx, rcx
    shr rcx, 1
reverse_loop:
    mov al, [rsi]
    mov dl, [rdi+rcx-1]
    mov [rsi], dl
    mov [rdi+rcx-1], al
    inc rsi
    dec rcx
    jnz reverse_loop

    pop rbp
    ret
;======================

%macro print 2
    mov eax, 4
    mov ebx, 1
    mov ecx, %1
    mov edx, %2
    int 0x80
%endmacro

section .data
    output: db "Number in base 4: ", 0
    digits: db "0123"
    input: dd 412
    
section .bss
    result: resb 20
    
section .text
    global _start
    
_start:
    mov eax, [input]
    mov ebx, 4
    mov ecx, result
    
    mov edx, 0
    divide_loop:
        xor edx, edx
        div ebx
        add edx, '0'
        mov byte [ecx], dl
        inc ecx
        cmp eax, 0
        jnz divide_loop
    
    mov byte [ecx], 0
    
    ; reverse the string in result
    mov ecx, result
    mov ebx, ecx
    dec ebx
    reverse_loop:
        cmp ecx, ebx
        jge done_reversing
        mov al, [ecx]
        mov ah, [ebx]
        mov [ecx], ah
        mov [ebx], al
        inc ecx
        dec ebx
        jmp reverse_loop
    done_reversing:
    
    ; print the output string
    mov ecx, output
    mov edx, 19
    call print
    
    ; print the converted number string
    mov ecx, result
    mov edx, ecx
    count_digits:
        cmp byte [edx], 0
        je done_counting
        inc edx
        jmp count_digits
    sub edx, result
    call print
    
    mov eax, 1
    xor ebx, ebx
    int 0x80

;========
.section .data
msjMenu1:    .ascii 0xA "Ingrese el numero de la operacion que desea realizar: ", 0xA, 0xA
longMsjMenu1 = . - msjMenu1
msjMenu2:    .ascii "1.Suma 2.Resta 3.Multiplicacion 4.Division 5.Salir del programa  ", 0xA, 0xA
longMsjMenu2 = . - msjMenu2
msjNum1:     .ascii "Ingrese el primer numero: "
longMsjNum1 = . - msjNum1
msjNum2:     .ascii 0xA "Ingrese el segundo numero: "
longMsjNum2 = . - msjNum2
newLine:     .ascii 0xA ; Nuevalinea para separar las hileras a mostrar en la consola
longNewLine = . - newLine
msjSuma:     .ascii "   Suma: ", 0
longMsjSuma = . - msjSuma
msjBase:     .ascii "Base ", 0
longMsjBase = . - msjBase
msjBase2:    .ascii "Base 2 ", 0
longMsjBase2 = . - msjBase2
msjBase8:    .ascii "Base 8 ", 0
longMsjBase8 = . - msjBase8
msjBase16:   .ascii "Base 16 ", 0
longMsjBase16 = . - msjBase16
msjResta:    .ascii "   Resta: ", 0
longMsjResta = . - msjResta
msjError:    .ascii 0xA "ERROR: Usted acaba de ingresar un numero invalido!", 0xA
longMsjError = . - msjError
msjErrorOf:  .ascii "ERROR: Resultado de la suma supera los 64 bits, hay overflow!", 0
longMsjErrorOf = . - msjErrorOf
msjErrorInput: .ascii "ERROR: Usted ingreso una opcion invalida, intente nuevamente y seleccione un digito del 1 al 5 segun corresponda", 0
longMsjErrorInput = . - msjErrorInput
msjContinuacion: .ascii "Digite 1 si desea intentar ingresar nuevamente el numero   "
longMsjContinuacion = . - msjContinuacion
msjSalida:   .ascii "Digite cualquier otra tecla si desea terminar el programa-> ", 0
longMsjSalida = . - msjSalida
signoNeg:    .ascii "-", 0
longSignoNeg = . - signoNeg
msjResultSuma: .ascii "Resultado de la suma: ", 0
longMsjResultSuma = . - msjResultSuma
msjResultResta: .ascii "Resultado de la resta: ", 0
longMsjResultResta = . - msjResultResta
msjResultMul: .ascii "Resultado de la multiplicacion: ", 0
longMsjResultMul = . - msjResultMul
msjResultDiv: .ascii "Resultado de la division: ", 0
longMsjResultDiv = . - msjResultDiv



;=======
section .data
    msg db 'car me lo ',0
    msglen equ $ - msg

section .bss
    sorted_msg resb 100
    sorted_len resb 1

section .text
    global _start

_insertion_sort:
    ; sort words in the string
    mov rsi, msg
    mov rdi, sorted_msg
    mov ecx, 0

.loop:
    ; find the next word in the string
    cmp byte [rsi], 0
    je .done
    cmp byte [rsi], ' '
    jne .in_word
    jmp .skip

.in_word:
    ; copy the word into the sorted string
    mov al, [rsi]
    mov [rdi], al
    inc rsi
    inc rdi
    inc ecx

    ; move the word into its proper position in the sorted string
    cmp ecx, 1
    jle .skip
    mov bl, byte [rdi-2]
    mov bh, byte [rdi-1]
    cmp bl, bh
    jbe .skip

.swap:
    mov byte [rdi-2], bh
    mov byte [rdi-1], bl
    dec rdi
    dec ecx
    cmp ecx, 1
    jle .skip
    mov bl, byte [rdi-2]
    mov bh, byte [rdi-1]
    cmp bl, bh
    ja .swap

.skip:
    cmp byte [rsi], 0
    je .done
    inc rsi
    jmp .loop

.done:
    ; null-terminate the sorted string
    mov byte [rdi], 0
    ; store the length of the sorted string
    mov byte [sorted_len], cl
    ret

_start:
    ; print the original string
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, msglen
    int 0x80

    ; sort the words in the string
    call _insertion_sort

    ; print the sorted string
    mov eax, 4
    mov ebx, 1
    mov ecx, sorted_msg
    mov edx, byte [sorted_len]
    int 0x80

    ; exit the program
    mov eax, 1
    xor ebx, ebx
    int 0x80
